# ·ª®ng d·ª•ng Web T·ªëi ∆Øu cho Tr·ª£ L√Ω B√°o C√°o Chi Ph√≠ v·ªõi Hybrid Memory
"""
·ª®ng d·ª•ng web Flask t·ªëi ∆∞u h√≥a v·ªõi hybrid memory integration
v√† t√≠nh nƒÉng reimbursement analysis ho√†n ch·ªânh.
"""

import os
# üîß Fix OpenMP conflict - PH·∫¢I ƒê·∫∂T TR∆Ø·ªöC KHI IMPORT B·∫§T K·ª≤ TH∆Ø VI·ªÜN N√ÄO
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"

import json
import uuid
from datetime import datetime

from flask import Flask, jsonify, render_template, request, send_file
from flask_cors import CORS

from database import ExpenseDB
from expense_assistant import ExpenseAssistant, create_client
from functions import EXPENSE_POLICIES, MOCK_EXPENSE_REPORTS, SAMPLE_USER_QUERIES, calculate_reimbursement
from text_to_speech import text_to_speech as tts

# üÜï RAG Integration
try:
    from rag_integration import get_rag_integration, is_rag_query
    RAG_AVAILABLE = True
except ImportError:
    RAG_AVAILABLE = False

# üîß Hybrid Memory Fix
try:
    from hybrid_memory_fix import RAGExpenseMemoryIntegration
    HYBRID_MEMORY_AVAILABLE = True
except ImportError:
    HYBRID_MEMORY_AVAILABLE = False

# üß† Smart Conversation Memory
try:
    from smart_memory_integration import (
        SmartConversationMemory, 
        WebAppMemoryIntegration,
        create_smart_memory_for_session
    )
    SMART_MEMORY_AVAILABLE = True
except ImportError:
    SMART_MEMORY_AVAILABLE = False

# üîê User Session Management
try:
    from user_session_manager import UserSessionManager, session_manager
    USER_SESSION_AVAILABLE = True
except ImportError:
    USER_SESSION_AVAILABLE = False

app = Flask(__name__)
app.secret_key = "expense_assistant_secret_key_2024"
CORS(app)

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
db = ExpenseDB()

# Kh·ªüi t·∫°o assistant - optional for compatibility
try:
    client = create_client()
    assistant = ExpenseAssistant(client, model="GPT-4o-mini")
except Exception:
    assistant = None

# Dictionary ƒë·ªÉ l∆∞u tr·ªØ c√°c phi√™n chat v·ªõi smart memory support
chat_sessions = {}

# Global expense memory integration
expense_memory_integration = None

def initialize_expense_memory():
    """Kh·ªüi t·∫°o expense memory integration t·ªëi ∆∞u"""
    global expense_memory_integration
    if expense_memory_integration is not None:
        return True
        
    try:
        if HYBRID_MEMORY_AVAILABLE:
            if RAG_AVAILABLE:
                from rag_integration import get_rag_integration
                rag_integration = get_rag_integration()
                expense_memory_integration = RAGExpenseMemoryIntegration(rag_integration)
            else:
                expense_memory_integration = RAGExpenseMemoryIntegration()
            return True
    except Exception as e:
        print(f"‚ùå Failed to initialize expense memory: {e}")
        return False


@app.route("/")
def home():
    """Trang ch·ªß c·ªßa ·ª©ng d·ª•ng web."""
    return render_template("index.html")


@app.route("/api/start_session", methods=["POST"])
def start_session():
    """B·∫Øt ƒë·∫ßu phi√™n chat m·ªõi - Guest session (ch∆∞a ƒëƒÉng nh·∫≠p)."""
    try:
        # Kh·ªüi t·∫°o expense memory
        initialize_expense_memory()
        
        # üîê Create guest session with User Session Manager
        session_id = None
        if USER_SESSION_AVAILABLE:
            session_id = session_manager.create_guest_session()
        else:
            session_id = str(uuid.uuid4())
        
        # T·∫°o expense session (legacy support)
        expense_session_id = None
        if expense_memory_integration:
            expense_session_id = expense_memory_integration.start_new_session()

        # üß† Smart memory ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p trong User Session Manager
        smart_memory_stats = None
        if USER_SESSION_AVAILABLE:
            session_info = session_manager.get_session_info(session_id)
            if session_info:
                smart_memory_stats = session_info['stats']

        # T·∫°o session data t·ªëi ∆∞u
        session_data = {
            "session_id": session_id,
            "expense_session_id": expense_session_id,
            "user_type": "guest",
            "account": None,
            "created_at": datetime.now().isoformat(),
            "message_count": 0,
            "type": "guest_session_with_smart_memory" if USER_SESSION_AVAILABLE else "guest_session",
            "rag_available": RAG_AVAILABLE,
            "hybrid_memory_available": HYBRID_MEMORY_AVAILABLE,
            "smart_memory_available": SMART_MEMORY_AVAILABLE,
            "user_session_available": USER_SESSION_AVAILABLE,
            "memory_stats": smart_memory_stats or {}
        }

        if RAG_AVAILABLE:
            from rag_integration import get_rag_integration
            session_data["rag_integration"] = get_rag_integration()
            session_data["type"] = "guest_rag_with_smart_memory"

        chat_sessions[session_id] = session_data

        return jsonify({
            "success": True,
            "session_id": session_id,
            "expense_session_id": expense_session_id,
            "user_type": "guest",
            "account": None,
            "message": "üöÄ Guest session with Smart Memory ready!",
            "features": {
                "rag": RAG_AVAILABLE,
                "memory": HYBRID_MEMORY_AVAILABLE,
                "smart_memory": SMART_MEMORY_AVAILABLE,
                "user_session": USER_SESSION_AVAILABLE,
                "reimbursement": True
            },
            "memory_stats": smart_memory_stats or {}
        })
        
    except Exception as e:
        print(f"‚ùå Error in start_session: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            "success": False,
            "error": f"L·ªói kh·ªüi t·∫°o: {str(e)}"
        }), 500


# üîê User Authentication Endpoints

@app.route("/api/login", methods=["POST"])
def login_user():
    """ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng (ch·ªâ c·∫ßn account)."""
    data = request.get_json()
    account = data.get("account", "").strip()
    
    if not account:
        return jsonify({
            "success": False,
            "error": "Account kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
        }), 400
    
    try:
        if not USER_SESSION_AVAILABLE:
            return jsonify({
                "success": False,
                "error": "User session system kh√¥ng kh·∫£ d·ª•ng"
            }), 503
        
        # Login user v√† t·∫°o session
        session_id, user_info = session_manager.login_user(account)
        
        # Kh·ªüi t·∫°o expense memory
        initialize_expense_memory()
        
        # T·∫°o expense session (legacy support)
        expense_session_id = None
        if expense_memory_integration:
            expense_session_id = expense_memory_integration.start_new_session()
        
        # T·∫°o session data cho chat_sessions
        session_data = {
            "session_id": session_id,
            "expense_session_id": expense_session_id,
            "user_type": "logged_in",
            "account": account,
            "created_at": user_info["created_at"].isoformat(),
            "message_count": 0,
            "type": "logged_in_session_with_smart_memory",
            "rag_available": RAG_AVAILABLE,
            "hybrid_memory_available": HYBRID_MEMORY_AVAILABLE,
            "smart_memory_available": SMART_MEMORY_AVAILABLE,
            "user_session_available": USER_SESSION_AVAILABLE,
            "memory_stats": user_info["stats"]
        }
        
        if RAG_AVAILABLE:
            from rag_integration import get_rag_integration
            session_data["rag_integration"] = get_rag_integration()
            session_data["type"] = "logged_in_rag_with_smart_memory"
        
        chat_sessions[session_id] = session_data
        
        return jsonify({
            "success": True,
            "session_id": session_id,
            "expense_session_id": expense_session_id,
            "user_type": "logged_in",
            "account": account,
            "message": f"üîì Welcome back, {account}! Your conversation history has been loaded.",
            "features": {
                "rag": RAG_AVAILABLE,
                "memory": HYBRID_MEMORY_AVAILABLE,
                "smart_memory": SMART_MEMORY_AVAILABLE,
                "user_session": USER_SESSION_AVAILABLE,
                "reimbursement": True,
                "persistent_storage": True
            },
            "memory_stats": user_info["stats"],
            "storage_info": {
                "type": "chromadb",
                "collection": user_info.get("collection_name"),
                "persistent": True
            }
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"L·ªói ƒëƒÉng nh·∫≠p: {str(e)}"
        }), 500


@app.route("/api/logout", methods=["POST"])
def logout_user():
    """ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng."""
    data = request.get_json()
    session_id = data.get("session_id")
    
    if not session_id:
        return jsonify({
            "success": False,
            "error": "Session ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
        }), 400
    
    try:
        if not USER_SESSION_AVAILABLE:
            return jsonify({
                "success": False,
                "error": "User session system kh√¥ng kh·∫£ d·ª•ng"
            }), 503
        
        # Get session info before logout
        session_info = session_manager.get_session_info(session_id)
        if not session_info:
            return jsonify({
                "success": False,
                "error": "Session kh√¥ng t·ªìn t·∫°i"
            }), 404
        
        account = session_info.get("account")
        user_type = session_info.get("user_type")
        
        # Logout from session manager
        if user_type == "logged_in":
            logout_success = session_manager.logout_user(session_id)
        else:
            logout_success = True  # Guest sessions don't need explicit logout
        
        # Remove from chat_sessions
        if session_id in chat_sessions:
            del chat_sessions[session_id]
        
        return jsonify({
            "success": True,
            "message": f"üîí Logged out successfully" + (f" - {account}" if account else " (guest)"),
            "user_type": user_type,
            "account": account
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"L·ªói ƒëƒÉng xu·∫•t: {str(e)}"
        }), 500


@app.route("/api/session_info/<session_id>", methods=["GET"])
def get_session_info(session_id):
    """L·∫•y th√¥ng tin phi√™n hi·ªán t·∫°i."""
    try:
        if not USER_SESSION_AVAILABLE:
            return jsonify({
                "success": False,
                "error": "User session system kh√¥ng kh·∫£ d·ª•ng"
            }), 503
        
        session_info = session_manager.get_session_info(session_id)
        if not session_info:
            return jsonify({
                "success": False,
                "error": "Session kh√¥ng t·ªìn t·∫°i"
            }), 404
        
        return jsonify({
            "success": True,
            "session_info": {
                "session_id": session_id,
                "user_type": session_info["user_type"],
                "account": session_info.get("account"),
                "created_at": session_info["created_at"].isoformat(),
                "last_activity": session_info["last_activity"].isoformat(),
                "stats": session_info["stats"]
            },
            "storage_info": {
                "type": "chromadb" if session_info["user_type"] == "logged_in" else "memory",
                "persistent": session_info["user_type"] == "logged_in"
            }
        })
        
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"L·ªói l·∫•y th√¥ng tin session: {str(e)}"
        }), 500


@app.route("/api/chat", methods=["POST"])
def chat():
    """X·ª≠ l√Ω tin nh·∫Øn chat v·ªõi User Session Manager v√† Smart Memory."""
    data = request.get_json()
    session_id = data.get("session_id")
    message = data.get("message", "").strip()

    # Validation
    if not session_id:
        return jsonify({"success": False, "error": "Session ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400
    if not message:
        return jsonify({"success": False, "error": "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"}), 400

    try:
        # üîê Get session info from User Session Manager
        session_info = None
        if USER_SESSION_AVAILABLE:
            session_info = session_manager.get_session_info(session_id)
            if not session_info:
                return jsonify({"success": False, "error": "Session kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n"}), 404
        
        # Fallback to legacy chat_sessions for backward compatibility
        session_data = chat_sessions.get(session_id)
        if not session_data and not session_info:
            return jsonify({"success": False, "error": "Phi√™n chat kh√¥ng h·ª£p l·ªá"}), 400
        
        # üß† Process v·ªõi User Session Manager Smart Memory
        conversation_result = None
        if USER_SESSION_AVAILABLE and session_info:
            # Add conversation turn to smart memory (will handle summarization automatically)
            # We'll add the assistant response after getting it from AI
            pass
        
        # Legacy smart memory support (fallback)
        elif session_data and session_data.get("smart_memory"):
            smart_memory = session_data["smart_memory"]
            
            # Add user message v√†o smart memory
            user_result = smart_memory.append({"role": "user", "content": message})
            
            # Get optimized context cho AI request
            ai_context = smart_memory.summarizer.get_conversation_context(smart_memory.session_id, max_summaries=2)
        
        # Kh·ªüi t·∫°o expense memory n·∫øu c·∫ßn
        if expense_memory_integration is None:
            initialize_expense_memory()
        
        # 1. X·ª≠ l√Ω capture chi ph√≠
        captured_expenses = []
        if expense_memory_integration:
            try:
                captured_expenses = expense_memory_integration.process_message(message) or []
            except Exception:
                pass

        # 2. Ki·ªÉm tra y√™u c·∫ßu b√°o c√°o
        if expense_memory_integration and expense_memory_integration.is_report_request(message):
            report = expense_memory_integration.get_report()
            summary = expense_memory_integration.get_summary()
            
            # üîê Add conversation to User Session Manager
            if USER_SESSION_AVAILABLE and session_info:
                conversation_result = session_manager.add_conversation_turn(session_id, message, report)
            
            # Legacy smart memory support
            elif session_data and session_data.get("smart_memory"):
                session_data["smart_memory"].append({"role": "assistant", "content": report})
                session_data["memory_stats"] = session_data["smart_memory"].get_stats()
            
            if session_data:
                session_data["message_count"] += 1
                
            return jsonify({
                "success": True,
                "response": report,
                "type": "expense_report",
                "expense_data": {"summary": summary},
                "memory_optimized": True,
                "smart_memory_stats": conversation_result.get("memory_stats") if conversation_result else session_data.get("memory_stats", {}),
                "user_type": session_info.get("user_type") if session_info else "legacy",
                "storage_type": "chromadb" if session_info and session_info.get("user_type") == "logged_in" else "memory"
            })

        # 3. Chi ph√≠ m·ªõi ƒë∆∞·ª£c k√™ khai
        elif captured_expenses:
            summary = expense_memory_integration.get_summary() if expense_memory_integration else {}
            
            # T√≠nh ho√†n tr·∫£
            reimbursement_info = ""
            try:
                if captured_expenses:
                    expense_list = [{
                        'category': exp.get('category', 'other'),
                        'amount': exp.get('amount', 0),
                        'description': exp.get('description', ''),
                        'date': '2025-08-08',
                        'has_receipt': True
                    } for exp in captured_expenses]
                    
                    reimbursement_data = calculate_reimbursement(expense_list)
                    if reimbursement_data:
                        reimbursed = reimbursement_data.get('total_reimbursed', 0)
                        if reimbursed > 0:
                            reimbursement_info = f" (Ho√†n tr·∫£: {reimbursed:,.0f} VND)"
            except Exception:
                pass
            
            # Ph·∫£n h·ªìi g·ªçn
            if len(captured_expenses) == 1:
                ce = captured_expenses[0]
                response = f"‚úÖ {ce.get('amount', 0):,.0f} VND - {ce.get('category', 'other').title()}{reimbursement_info}"
            else:
                response = f"‚úÖ {len(captured_expenses)} kho·∫£n chi ph√≠{reimbursement_info}"
            
            response += f"\nüìä T·ªïng: {summary.get('total_expenses', 0)} kho·∫£n - {summary.get('total_amount', 0):,.0f} VND"
            
            # üîê Add conversation to User Session Manager
            if USER_SESSION_AVAILABLE and session_info:
                conversation_result = session_manager.add_conversation_turn(session_id, message, response)
            
            # Legacy smart memory support
            elif session_data and session_data.get("smart_memory"):
                session_data["smart_memory"].append({"role": "assistant", "content": response})
                session_data["memory_stats"] = session_data["smart_memory"].get_stats()
            
            if session_data:
                session_data["message_count"] += 1
                
            return jsonify({
                "success": True,
                "response": response,
                "type": "expense_declaration",
                "expense_data": {"new_expenses": captured_expenses, "summary": summary},
                "memory_optimized": True,
                "smart_memory_stats": conversation_result.get("memory_stats") if conversation_result else session_data.get("memory_stats", {}),
                "user_type": session_info.get("user_type") if session_info else "legacy",
                "storage_type": "chromadb" if session_info and session_info.get("user_type") == "logged_in" else "memory"
            })

        # 4. RAG query - check for both guest and logged-in RAG types
        elif session_data.get("type") in ["guest_rag_with_smart_memory", "logged_in_rag_with_smart_memory", "rag_with_memory"] and "rag_integration" in session_data:
            try:
                print(f"üîç Processing RAG query: {message[:50]}...")
                rag_integration = session_data["rag_integration"]
                rag_response = rag_integration.get_rag_response(message, use_hybrid=True)
                print(f"‚úÖ RAG response received: {len(rag_response.get('content', ''))} chars")
                
                # Add assistant response v√†o smart memory
                if session_data.get("smart_memory"):
                    session_data["smart_memory"].append({"role": "assistant", "content": rag_response.get("content", "")})
                    session_data["memory_stats"] = session_data["smart_memory"].get_stats()
                
                session_data["message_count"] += 1
                return jsonify({
                    "success": True,
                    "response": rag_response.get("content", "Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi."),
                    "rag_used": True,
                    "sources": rag_response.get("sources", []),
                    "memory_optimized": True,
                    "smart_memory_stats": session_data.get("memory_stats", {}),
                    "type": "rag_response"
                })
            except Exception as e:
                print(f"‚ùå RAG Error: {str(e)}")
                import traceback
                traceback.print_exc()
                # Fallback to basic response instead of crashing
                pass

        # 5. Basic response v·ªõi smart memory
        basic_responses = {
            "ch√†o": "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n k√™ khai chi ph√≠ v√† t·∫°o b√°o c√°o.",
            "gi√∫p": "T√¥i c√≥ th·ªÉ:\n‚Ä¢ K√™ khai chi ph√≠\n‚Ä¢ T·∫°o b√°o c√°o\n‚Ä¢ T√≠nh ho√†n tr·∫£"
        }
        
        response = "ü§ñ Tr·ª£ l√Ω chi ph√≠ v·ªõi Smart Memory s·∫µn s√†ng! H√£y k√™ khai chi ph√≠ ho·∫∑c y√™u c·∫ßu b√°o c√°o."
        for keyword, resp in basic_responses.items():
            if keyword in message.lower():
                response = resp
                break
        
        # üîê Add conversation to User Session Manager
        if USER_SESSION_AVAILABLE and session_info:
            conversation_result = session_manager.add_conversation_turn(session_id, message, response)
        
        # Legacy smart memory support
        elif session_data and session_data.get("smart_memory"):
            session_data["smart_memory"].append({"role": "assistant", "content": response})
            session_data["memory_stats"] = session_data["smart_memory"].get_stats()
        
        if session_data:
            session_data["message_count"] += 1
            
        return jsonify({
            "success": True,
            "response": response,
            "type": "basic_response",
            "memory_optimized": True,
            "smart_memory_stats": conversation_result.get("memory_stats") if conversation_result else session_data.get("memory_stats", {}),
            "user_type": session_info.get("user_type") if session_info else "legacy",
            "storage_type": "chromadb" if session_info and session_info.get("user_type") == "logged_in" else "memory"
        })

    except Exception as e:
        return jsonify({"success": False, "error": f"L·ªói x·ª≠ l√Ω: {str(e)}"}), 500


# ========================================
# üß† SMART MEMORY DASHBOARD ROUTES  
# ========================================

@app.route("/smart_memory/dashboard")
def smart_memory_dashboard():
    """Smart Memory Performance Dashboard"""
    return render_template("index.html")  # S·ª≠ d·ª•ng existing template v·ªõi dashboard features


@app.route("/api/smart_memory/stats/<session_id>")
def get_smart_memory_stats(session_id: str):
    """API: L·∫•y th·ªëng k√™ smart memory cho session v·ªõi User Session Manager"""
    try:
        # üîê Try User Session Manager first
        if USER_SESSION_AVAILABLE:
            session_info = session_manager.get_session_info(session_id)
            if session_info:
                return jsonify({
                    'success': True,
                    'stats': session_info['stats'],
                    'session_type': session_info['user_type'],
                    'account': session_info.get('account'),
                    'storage_type': 'chromadb' if session_info['user_type'] == 'logged_in' else 'memory',
                    'last_activity': session_info['last_activity'].isoformat()
                })
        
        # Fallback to legacy chat_sessions
        if session_id not in chat_sessions:
            return jsonify({'success': False, 'error': 'Session not found'}), 404
        
        session_data = chat_sessions[session_id]
        smart_memory = session_data.get('smart_memory')
        
        if not smart_memory:
            return jsonify({'success': False, 'error': 'Smart memory not available for this session'}), 400
        
        stats = smart_memory.get_stats()
        
        # Th√™m th√¥ng tin chi ti·∫øt
        detailed_stats = {
            **stats,
            'session_info': {
                'session_id': session_id,
                'created_at': session_data.get('created_at'),
                'message_count': session_data.get('message_count', 0),
                'type': session_data.get('type')
            },
            'memory_efficiency': {
                'avg_tokens_per_message': stats.get('total_tokens_saved', 0) / max(1, stats.get('total_messages_processed', 1)),
                'summarization_frequency': stats.get('summaries_created', 0) / max(1, stats.get('total_messages_processed', 1)) * 100,
                'compression_ratio': f"{stats.get('efficiency_ratio', '0%')}"
            },
            'storage_type': 'memory'
        }
        
        return jsonify({
            'success': True,
            'stats': detailed_stats,
            'session_type': 'legacy',
            'storage_type': 'memory'
        })
        
    except Exception as e:
        return jsonify({'success': False, 'error': f'Error getting stats: {str(e)}'}), 500


@app.route("/api/smart_memory/global_stats")
def get_global_smart_memory_stats():
    """API: Th·ªëng k√™ smart memory to√†n c·ª•c v·ªõi User Session Manager"""
    try:
        # üîê Get stats from User Session Manager
        if USER_SESSION_AVAILABLE:
            global_stats = session_manager.get_global_stats()
            return jsonify({
                'success': True,
                'global_stats': global_stats,
                'system_type': 'user_session_manager'
            })
        
        # Fallback to legacy system
        total_sessions = 0
        smart_memory_sessions = 0
        total_tokens_saved = 0
        total_summaries = 0
        total_messages = 0
        
        session_details = []
        
        for session_id, session_data in chat_sessions.items():
            total_sessions += 1
            
            smart_memory = session_data.get('smart_memory')
            if smart_memory:
                smart_memory_sessions += 1
                stats = smart_memory.get_stats()
                
                total_tokens_saved += stats.get('total_tokens_saved', 0)
                total_summaries += stats.get('summaries_created', 0)
                total_messages += stats.get('total_messages_processed', 0)
                
                session_details.append({
                    'session_id': session_id,
                    'created_at': session_data.get('created_at'),
                    'message_count': session_data.get('message_count', 0),
                    'tokens_saved': stats.get('total_tokens_saved', 0),
                    'summaries': stats.get('summaries_created', 0),
                    'efficiency': stats.get('efficiency_ratio', '0%')
                })
        
        # T√≠nh to√°n metrics t·ªïng quan
        avg_tokens_saved = total_tokens_saved / max(1, smart_memory_sessions)
        avg_summaries_per_session = total_summaries / max(1, smart_memory_sessions)
        
        global_stats = {
            'overview': {
                'total_sessions': total_sessions,
                'smart_memory_sessions': smart_memory_sessions,
                'adoption_rate': f"{(smart_memory_sessions / max(1, total_sessions)) * 100:.1f}%",
                'total_tokens_saved': total_tokens_saved,
                'total_summaries': total_summaries,
                'total_messages': total_messages
            },
            'performance': {
                'avg_tokens_saved_per_session': round(avg_tokens_saved, 2),
                'avg_summaries_per_session': round(avg_summaries_per_session, 2),
                'estimated_cost_savings': f"${(total_tokens_saved * 0.00001):.4f}",
                'memory_efficiency': f"{(total_tokens_saved / max(1, total_messages * 50)) * 100:.1f}%"
            },
            'sessions': sorted(session_details, key=lambda x: x['tokens_saved'], reverse=True)[:10]
        }
        
        return jsonify(global_stats)
        
    except Exception as e:
        return jsonify({'error': f'Failed to get global stats: {str(e)}'}), 500


@app.route("/api/smart_memory/optimize/<session_id>", methods=["POST"])
def optimize_smart_memory_session(session_id: str):
    """API: Force optimization cho session v·ªõi User Session Manager"""
    try:
        # üîê Try User Session Manager first
        if USER_SESSION_AVAILABLE:
            session_info = session_manager.get_session_info(session_id)
            if session_info:
                # Optimize memory using User Session Manager
                optimization_result = session_manager.optimize_session_memory(session_id)
                
                # Get updated stats
                updated_session_info = session_manager.get_session_info(session_id)
                
                return jsonify({
                    'success': True,
                    'optimization_result': optimization_result,
                    'new_stats': updated_session_info['stats'],
                    'session_type': session_info['user_type'],
                    'storage_type': 'chromadb' if session_info['user_type'] == 'logged_in' else 'memory'
                })
        
        # Fallback to legacy system
        if session_id not in chat_sessions:
            return jsonify({'success': False, 'error': 'Session not found'}), 404
        
        session_data = chat_sessions[session_id]
        smart_memory = session_data.get('smart_memory')
        
        if not smart_memory:
            return jsonify({'success': False, 'error': 'Smart memory not available'}), 400
        
        # Force summarization n·∫øu c√≥ ƒë·ªß messages
        if smart_memory.session_id in smart_memory.summarizer.active_conversations:
            messages = smart_memory.summarizer.active_conversations[smart_memory.session_id]['messages']
            
            if len(messages) >= 3:  # Minimum for summarization
                result = smart_memory.summarizer.summarize_conversation_window(smart_memory.session_id)
                
                # Update session stats
                session_data['memory_stats'] = smart_memory.get_stats()
                
                return jsonify({
                    'success': True,
                    'optimization_result': result,
                    'new_stats': session_data['memory_stats'],
                    'session_type': 'legacy',
                    'storage_type': 'memory'
                })
            else:
                return jsonify({
                    'success': False,
                    'error': 'Not enough messages for optimization'
                })
        else:
            return jsonify({
                'success': False,
                'error': 'No active conversation found'
            })
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Optimization failed: {str(e)}'
        })


@app.route("/api/text-to-speech", methods=["POST"])
def text_to_speech_route():
    """Converts text to speech and returns the audio file."""
    data = request.get_json()
    text = data.get("text", "").strip()

    if not text:
        return jsonify({"success": False, "error": "Text cannot be empty"}), 400

    try:
        output_filename = f"speech_{uuid.uuid4()}.wav"
        output_path = tts(text, output_filename)
        audio_url = f"/audio/{output_filename}"

        return jsonify({"success": True, "audio_url": audio_url})

    except Exception as e:
        return jsonify({"success": False, "error": f"Error generating speech: {str(e)}"}), 500


@app.route("/audio/<filename>")
def serve_audio(filename):
    """Serves the generated audio file."""
    return send_file(os.path.join("audio_chats", filename))


@app.route("/api/sample_questions")
def sample_questions():
    """L·∫•y danh s√°ch c√¢u h·ªèi m·∫´u."""
    return jsonify({"success": True, "questions": SAMPLE_USER_QUERIES})


@app.route("/api/system_info")
def system_info():
    """Th√¥ng tin h·ªá th·ªëng t·ªëi ∆∞u."""
    # Expense memory status
    expense_status = {"available": False}
    if expense_memory_integration:
        try:
            summary = expense_memory_integration.get_summary()
            expense_status = {
                "available": True,
                "total_expenses": summary.get("total_expenses", 0),
                "total_amount": summary.get("total_amount", 0)
            }
        except Exception:
            pass
    
    return jsonify({
        "success": True,
        "info": {
            "policies": len(EXPENSE_POLICIES),
            "active_sessions": len(chat_sessions),
            "features": {
                "rag": RAG_AVAILABLE,
                "hybrid_memory": HYBRID_MEMORY_AVAILABLE,
                "reimbursement": True,
                "optimized": True
            },
            "expense_memory": expense_status
        }
    })


# üÜï Enhanced Expense Memory Endpoints
@app.route("/api/expense_summary", methods=["GET"])
def get_expense_summary():
    """Get current expense session summary"""
    try:
        if expense_memory_integration is None:
            initialize_expense_memory()
            
        if expense_memory_integration is None:
            return jsonify({
                'success': False,
                'error': 'Expense memory not available'
            }), 503
        
        summary = expense_memory_integration.get_summary()
        return jsonify({
            'success': True,
            'summary': summary
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'L·ªói l·∫•y th√¥ng tin: {str(e)}'
        }), 500


@app.route("/api/generate_report", methods=["POST"])
def generate_report():
    """Generate expense report on demand with reimbursement analysis"""
    try:
        if expense_memory_integration is None:
            initialize_expense_memory()
            
        if expense_memory_integration is None:
            return jsonify({
                'success': False,
                'error': 'Expense memory not available'
            }), 503
        
        data = request.get_json() or {}
        format_type = data.get('format', 'detailed')  # 'detailed' or 'summary'
        
        report = expense_memory_integration.get_report(format_type)
        summary = expense_memory_integration.get_summary()
        
        # Add reimbursement analysis
        reimbursement_data = None
        if expense_memory_integration.hybrid_memory.expense_store["current_expenses"]:
            try:
                # Convert expenses to format expected by calculate_reimbursement
                expense_list = []
                for exp in expense_memory_integration.hybrid_memory.expense_store["current_expenses"]:
                    expense_list.append({
                        'category': exp.get('category', 'other'),
                        'amount': exp.get('amount', 0),
                        'description': exp.get('description', ''),
                        'date': exp.get('timestamp', '2025-08-08')[:10],
                        'has_receipt': True  # Assume receipts for now
                    })
                
                reimbursement_data = calculate_reimbursement(expense_list)
            except Exception as e:
                print(f"‚ö†Ô∏è Reimbursement calculation error: {e}")
        
        return jsonify({
            'success': True,
            'report': report,
            'summary': summary,
            'reimbursement': reimbursement_data,
            'format': format_type
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'L·ªói t·∫°o b√°o c√°o: {str(e)}'
        }), 500


@app.route("/api/reimbursement_analysis", methods=["GET"])
def get_reimbursement_analysis():
    """Get detailed reimbursement analysis for current expenses"""
    try:
        if expense_memory_integration is None:
            initialize_expense_memory()
            
        if expense_memory_integration is None:
            return jsonify({
                'success': False,
                'error': 'Expense memory not available'
            }), 503
        
        current_expenses = expense_memory_integration.hybrid_memory.expense_store["current_expenses"]
        
        if not current_expenses:
            return jsonify({
                'success': True,
                'message': 'Kh√¥ng c√≥ chi ph√≠ n√†o ƒë·ªÉ ph√¢n t√≠ch',
                'reimbursement': None
            })
        
        # Convert expenses to format expected by calculate_reimbursement
        expense_list = []
        for exp in current_expenses:
            expense_list.append({
                'category': exp.get('category', 'other'),
                'amount': exp.get('amount', 0),
                'description': exp.get('description', ''),
                'date': exp.get('timestamp', '2025-08-08')[:10],
                'has_receipt': True  # Assume receipts for now
            })
        
        reimbursement_data = calculate_reimbursement(expense_list)
        
        return jsonify({
            'success': True,
            'reimbursement': reimbursement_data,
            'total_expenses': len(current_expenses),
            'analysis_date': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'L·ªói ph√¢n t√≠ch ho√†n tr·∫£: {str(e)}'
        }), 500


# üÜï RAG API Endpoints - Workshop 4
@app.route("/api/rag/search", methods=["POST"])
def rag_search():
    """Search knowledge base using RAG system"""
    if not RAG_AVAILABLE:
        return jsonify({"success": False, "error": "RAG system not available"}), 503
    
    data = request.get_json()
    query = data.get("query", "").strip()
    limit = data.get("limit", 5)
    
    if not query:
        return jsonify({"success": False, "error": "Query cannot be empty"}), 400
    
    try:
        rag_integration = get_rag_integration()
        search_results = rag_integration.search_knowledge_base(query, limit)
        
        return jsonify({
            "success": True,
            "query": query,
            "results": search_results["results"],
            "total_found": search_results["total"],
            "limit": limit
        })
        
    except Exception as e:
        return jsonify({"success": False, "error": f"Search failed: {str(e)}"}), 500


@app.route("/api/rag/query", methods=["POST"])
def rag_query():
    """Get RAG response for a query"""
    if not RAG_AVAILABLE:
        return jsonify({"success": False, "error": "RAG system not available"}), 503
    
    data = request.get_json()
    query = data.get("query", "").strip()
    use_hybrid = data.get("use_hybrid", True)
    
    if not query:
        return jsonify({"success": False, "error": "Query cannot be empty"}), 400
    
    try:
        rag_integration = get_rag_integration()
        rag_response = rag_integration.get_rag_response(query, use_hybrid)
        
        return jsonify({
            "success": True,
            "query": query,
            "response": rag_response["content"],
            "rag_used": rag_response.get("rag_used", False),
            "response_type": rag_response.get("response_type", "unknown"),
            "function_calling_used": rag_response.get("function_calling_used", False),
            "sources": rag_response.get("sources", [])
        })
        
    except Exception as e:
        return jsonify({"success": False, "error": f"RAG query failed: {str(e)}"}), 500


@app.route("/api/rag/stats")
def rag_stats():
    """Get RAG system statistics"""
    if not RAG_AVAILABLE:
        return jsonify({"success": False, "error": "RAG system not available"}), 503
    
    try:
        rag_integration = get_rag_integration()
        stats = rag_integration.get_system_stats()
        
        return jsonify({
            "success": True,
            "stats": stats,
            "rag_available": rag_integration.is_rag_available()
        })
        
    except Exception as e:
        return jsonify({"success": False, "error": f"Failed to get stats: {str(e)}"}), 500


@app.route("/api/clear_session", methods=["POST"])
def clear_session():
    """X√≥a phi√™n chat."""
    data = request.get_json()
    session_id = data.get("session_id")

    if session_id and session_id in chat_sessions:
        # Reset expense memory if available
        if expense_memory_integration:
            expense_memory_integration.start_new_session()
        
        chat_sessions[session_id]["message_count"] = 0
        return jsonify({"success": True, "message": "Phi√™n chat ƒë√£ ƒë∆∞·ª£c x√≥a"})

    return jsonify({"success": False, "error": "Phi√™n chat kh√¥ng t·ªìn t·∫°i"}), 400


@app.route("/api/session_stats/<session_id>")
def session_stats(session_id):
    """L·∫•y th·ªëng k√™ phi√™n chat."""
    if session_id in chat_sessions:
        session_data = chat_sessions[session_id]
        return jsonify({
            "success": True,
            "stats": {
                "created_at": session_data["created_at"],
                "message_count": session_data["message_count"],
                "type": session_data.get("type", "unknown"),
                "features": {
                    "rag": RAG_AVAILABLE,
                    "memory": HYBRID_MEMORY_AVAILABLE
                }
            }
        })

    return jsonify({"success": False, "error": "Phi√™n chat kh√¥ng t·ªìn t·∫°i"}), 404


@app.errorhandler(404)
def not_found(error):
    """X·ª≠ l√Ω l·ªói 404."""
    return jsonify({"success": False, "error": "Kh√¥ng t√¨m th·∫•y trang"}), 404


@app.errorhandler(500)
def internal_error(error):
    """X·ª≠ l√Ω l·ªói 500."""
    return jsonify({"success": False, "error": "L·ªói m√°y ch·ªß n·ªôi b·ªô"}), 500


@app.route("/api/health", methods=["GET"])
def health_check():
    """
    üè• System health check endpoint
    
    Returns comprehensive system health status and recommendations
    """
    try:
        # Database health check
        db = ExpenseDB()
        health_status = db.system_health_check()
        
        # Add application-level checks
        health_status["application"] = {
            "rag_available": RAG_AVAILABLE,
            "smart_memory_available": SMART_MEMORY_AVAILABLE,
            "user_sessions_available": USER_SESSION_AVAILABLE,
            "hybrid_memory_available": HYBRID_MEMORY_AVAILABLE
        }
        
        # System score calculation
        total_docs = health_status.get("total_documents", 0)
        app_features = sum([
            RAG_AVAILABLE, SMART_MEMORY_AVAILABLE, 
            USER_SESSION_AVAILABLE, HYBRID_MEMORY_AVAILABLE
        ])
        
        if health_status["overall_status"] == "excellent" and app_features >= 3:
            system_score = 9.0
        elif health_status["overall_status"] == "good" and app_features >= 2:
            system_score = 7.5
        elif health_status["overall_status"] == "fair":
            system_score = 6.0
        else:
            system_score = 4.0
            
        health_status["system_score"] = system_score
        health_status["grade"] = (
            "üü¢ EXCELLENT" if system_score >= 8.5 else
            "üü° GOOD" if system_score >= 7.0 else
            "üü† FAIR" if system_score >= 6.0 else
            "üî¥ NEEDS IMPROVEMENT"
        )
        
        return jsonify(health_status)
        
    except Exception as e:
        return jsonify({
            "overall_status": "error",
            "error": str(e),
            "system_score": 0.0,
            "grade": "üî¥ SYSTEM ERROR"
        }), 500


@app.route("/api/stats", methods=["GET"])
def system_stats():
    """
    üìä Get system statistics
    """
    try:
        db = ExpenseDB()
        stats = db.get_system_stats()
        
        # Add session statistics if available
        if USER_SESSION_AVAILABLE and session_manager:
            session_stats = session_manager.get_session_stats()
            stats["sessions"] = session_stats
            
        return jsonify(stats)
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == "__main__":
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    os.makedirs("templates", exist_ok=True)
    os.makedirs("static/css", exist_ok=True)
    os.makedirs("static/js", exist_ok=True)

    print("üåê Kh·ªüi ƒë·ªông Tr·ª£ L√Ω B√°o C√°o Chi Ph√≠ (V·ªõi Login System)...")
    print(f"   ‚Ä¢ RAG: {'‚úÖ' if RAG_AVAILABLE else '‚ùå'}")
    print(f"   ‚Ä¢ Hybrid Memory: {'‚úÖ' if HYBRID_MEMORY_AVAILABLE else '‚ùå'}")
    print(f"   ‚Ä¢ Smart Memory: {'‚úÖ' if SMART_MEMORY_AVAILABLE else '‚ùå'}")
    print(f"   ‚Ä¢ User Sessions: {'‚úÖ' if USER_SESSION_AVAILABLE else '‚ùå'}")
    print(f"   ‚Ä¢ Ch√≠nh s√°ch: {len(EXPENSE_POLICIES)} danh m·ª•c")
    print("üöÄ Server: http://localhost:5000")
    print("üîê Features:")
    print("   ‚Ä¢ Guest Mode: Memory-only storage")
    print("   ‚Ä¢ Login Mode: Persistent ChromaDB storage")
    print("   ‚Ä¢ Smart conversation summarization")

    # Kh·ªüi ƒë·ªông Enhanced Expense Memory
    if HYBRID_MEMORY_AVAILABLE:
        initialize_expense_memory()

    app.run(debug=True, host="0.0.0.0", port=5000)
